package Domain;

import org.json.simple.parser.ParseException;

import Presentation.ControllerObserver;
import Presentation.ControllerSubject;

public class ControllerCommunicator implements ControllerSubject, ControllerObserver{
	
	private SubsystemController sc;
	
	public ControllerCommunicator(SubsystemController sc){
		
		this.sc = sc;
	}

	@Override
	public void registerControllerObserver(ControllerObserver c) {
		
		this.sc.addController(c);
	}

	@Override
	public void removeControllerObserver(ControllerObserver c) {
		
		this.sc.removeController(c);
	}
	
	public String drinkResponse(String jresponse){
		
		try {
			
			Response response = this.sc.getJModule().parseResponse(jresponse);
			
			for (Order o : this.sc.getOrders()){
				
				if (o.checkID(response.getOrderID())){
					
					o.updateStatus(response.getStatus(), 
								   response.getMessage());
					
					this.sc.sendResponse(o);
				}
			}
			
			System.out.println("Error: Order not found.");
			return null;
		} 
		
		catch (ParseException e) {

			System.out.println("ERROR: Invalid Response Format.");
		}
		
		return null;
	}

	@Override
	//would normally send data to identified controller, but will print out instead for testing
	public String notifyControllerObserver(Order o) {
		
		String jcommand = o.constructCommand();
		return jcommand;
	}
}
